---
title: "678 Project"
author: "Aabha Latkar"
format: html
editor: visual
---

## Starbucks! Introduction to the Dataset
# we can see that only 26% of the offers in our random sample were completed. Sending the offers requires money and if we can predict beforehand if a customer will complete the offer, we can save money on advertising and take business decisions accordingly.

Starbucks <https://quarto.org>.

## Objectives and Methods

When you click the **Render** 

## Data Wrangling

```{r}
#First we will load the data and the libraries
library(tidyr)
library(readr)
library(lubridate)
library(stringr)
library(reshape2)
library(ggplot2)
library(lme4)
library(dplyr)
library(caret)
library(ROSE)

portfolio <- read_csv("portfolio.csv", show_col_types = FALSE)
profile <- read_csv("profile.csv", show_col_types = FALSE)
transcript <- read_csv("transcript2.csv", show_col_types = FALSE)
```

```{r}
#Get the data description and see if there are any missing values for each of the 3 dataset

#profile
#summary(profile)
#we can see that there are a lot of missing values in the income variable and there is 
#one incorrect observation- age 118. We can fix that. We will also have to seperate the "became member on" column into year, month and day to get the duration of the customer's membership. 
profile <- na.omit(profile)

profile <- subset(profile, age != 118)
profile <- subset(profile, age !=101)

profile$became_member_on <- ymd(profile$became_member_on)
profile$weeks_as_member <- as.numeric(difftime(Sys.Date(), profile$became_member_on, units = "weeks"))
profile$weeks_as_member <- round(profile$weeks_as_member)

colnames(profile)[colnames(profile) == "id"] <- "person"
profile <- profile[, -1]

#portfolio
#summary(portfolio)
portfolio <- portfolio[, -1]

#transcript
#summary(transcript)
transcript <- transcript[, -1]
transcript <- transcript %>% select(-reward)
#merge the datasets together
#we can merge transcript and portfolio by id and proile and transcript by person
data1 <- merge(profile, transcript, by = "person", all.x = FALSE)
data1$new <- 1
data1 <- data1 %>%
  pivot_wider(names_from = event, values_from = new, values_fn = list)
starbucks <- merge(data1, portfolio, by = "id", all.x = TRUE)
starbucks <- starbucks %>%
  select( -10, -11)
starbucks[is.na(starbucks)] <- 0
income_brackets <- cut(starbucks$income, breaks = c(30000, 50000, 70000, 90000, 110000, 120000),
                       labels = c("30k-50k", "50k-70k", "70k-90k", "90k-110k", "110k-120k"),
                       include.lowest = TRUE)
starbucks$income_bracket <- income_brackets
starbucks <- starbucks %>% filter(transaction != "1")
starbucks <- starbucks %>% select(-transaction, -`transaction amount`, -`offer viewed`, -`offer received`, -time)
starbucks$`offer completed`[is.null(starbucks$`offer completed`)] <- 0
starbucks$became_member_on <- as.Date(starbucks$became_member_on, format = "%Y%m%d")
starbucks$member_year <- year(starbucks$became_member_on)
starbucks <- starbucks %>% select(-became_member_on)
starbucks$`offer completed` <- gsub("NULL", "0", starbucks$`offer completed`)
starbucks<- starbucks[starbucks$`offer completed` %in% c(0, 1), ]
starbucks$`offer completed` <- as.numeric(starbucks$`offer completed`)
starbucks <- starbucks %>%
                    group_by(person) %>%
                    sample_n(size = 1) %>%
                    ungroup()
ids_without_offer_completed <- starbucks %>%
  group_by(id) %>%
  summarise(has_offer_completed = any(`offer completed` == 1)) %>%
  filter(!has_offer_completed) %>%
  pull(id)
starbucks <- starbucks %>%
  filter(!(id %in% ids_without_offer_completed))
starbucks$age <- scale(starbucks$age)
starbucks$income <- scale(starbucks$income)
starbucks$weeks_as_member <- scale(starbucks$weeks_as_member)
starbucks<- starbucks%>%
  rename(completed = `offer completed`)
```

##EDA
```{r}
#correlation analysis
numeric_columns <- sapply(starbucks, is.numeric)
numeric_starbucks <- starbucks[, numeric_columns]
cormat <- round(cor(numeric_starbucks), 2)
#head(cormat)
melted_cormat <- melt(cormat)

ggplot(data = melted_cormat, aes(Var1, Var2, fill = value)) +   geom_tile() +   geom_text(aes(label = round(value, 2)), color = "black") +     scale_fill_gradient(low = "blue", high = "red") +   labs(title = "College Correlation Heatmap", x = "Variables", y = "Variables") +   theme(axis.text.x = element_text(angle = 45, hjust = 1))  

#seeing how the offers completed vary across offer types

starbucks <- na.omit(starbucks)
proportion_data <- starbucks %>%
  group_by(id) %>%
  summarise(count = sum(`offer completed`==1))
proportion_data1 <- proportion_data %>%mutate(proportion= count/sum(count))

ggplot(proportion_data1, aes(x = as.factor(id), y = proportion))+
  geom_bar(stat="identity") +
  labs(title = "Proportion of Offer Completion by ID", x = "ID", y = "Proportion of Offer Completion") + theme(axis.text.x = element_text(angle = 45, hjust = 1))

#How many offer completed?
ggplot(starbucks)+
geom_bar()+
aes(x=`offer completed`)

#Seeing how the offers completed varies across people.
proportion_data2 <- starbucks %>%
  group_by(person) %>%   
  summarise(count = sum(`offer completed` == 1))
proportion_data3 <- proportion_data2 %>%
  mutate(proportion = count / sum(count))

hist(proportion_data3$count)

starbucks%>%
summarise(completed =mean(`offer completed`))
starbucks%>%
group_by(gender)%>%
summarise(completed1=mean(
`offer completed`))
ggplot(starbucks)+
geom_bar()+
aes(x=`offer completed`)

ggplot(starbucks %>% filter(gender == "gender")) +
  geom_bar(aes(x = `offer completed`))

ggplot(starbucks, aes(x = gender, fill = `offer completed`)) +
  geom_bar() +
  labs(x = "Offer Completed", y = "Count") +
  scale_fill_manual(values = c("0" = "red", "1" = "pink")) +
  theme_minimal()

ggplot(starbucks, aes(x = factor(gender), fill = factor(`offer completed`))) +
  geom_bar(position = "stack") +
  labs(x = "Gender", y = "Count") +
  scale_fill_manual(values = c("0" = "red", "1" = "green")) +
  theme_minimal()

percentage_data <- starbucks %>%
  group_by(gender, `offer completed`) %>%
  summarise(count = n()) %>%
  mutate(percentage = count / sum(count) * 100)

ggplot(percentage_data, aes(x = factor(gender), y = percentage, fill = factor(`offer completed`))) +
  geom_bar(stat = "identity", position = "fill") +
  labs(x = "Gender", y = "Percentage") +
  scale_fill_manual(values = c("0" = "darkblue", "1" = "lightblue")) +
  theme_minimal()
```

```{r}
set.seed(123)

# Assuming 'data' is your dataset
# 80% of the data will be used for training
index <- createDataPartition(starbucks$completed, p = 0.8, list = FALSE)

# Create training and test sets
starbucks_train <- starbucks[index, ]
starbucks_test  <- starbucks[-index, ]
```

```{r}

# Perform oversampling using ovun.sample
#starbucks <- ovun.sample( completed ~ age + gender + income + reward + id+ difficulty + weeks_as_member + offer_type + channels,
#                             data = starbucks, method = "both", N = 12000, seed =  #1)$data


# Check the class distribution after oversampling
#table(starbucks$completed)

```

##Modelling!
```{r}
#The null model
null_model <- glm(completed~ 1, data= starbucks_train, family= "binomial")
summary(null_model)

#The normal model
try1 <- glm(completed ~ income + age + gender + gender:income + gender:age + weeks_as_member+ difficulty+reward, data = starbucks_train, family = "binomial")

#The normal model 2
logistic_model2 <- glm(completed~ difficulty + offer_type +reward, data= starbucks_train, family= "binomial")
summary(logistic_model2)

#partial_pooling1
partial_pool_model <- glmer(formula = completed~ age + income + gender + weeks_as_member + (1 | id),
                        family = binomial,
                        data = starbucks_train)
summary(partial_pool_model)

#partial_pooling2
partial_pool_model2 <- glmer(formula = completed~ income + age + gender + gender:income + gender:age + weeks_as_member + offer_type + difficulty +(1 | id),
                        family = binomial,
                        data = starbucks_train)
summary(partial_pool_model)

#complete pooling
cp <- glm(completed ~ income + age + gender + gender:income + gender:age + weeks_as_member+id, data = starbucks_train, family = "binomial")
```


```{r}
#misclassification error
 
predicted_probabilities <- predict(cp, newdata = starbucks_test, type = "response")
predicted_classes <- ifelse(predicted_probabilities > 0.5, 1, 0)
actual_classes <- starbucks_test$completed

# Calculate misclassification error
misclassification_error <- mean(predicted_classes != actual_classes)

print(paste("Misclassification Error:", misclassification_error))

```




The `echo: false` option disables the printing of code (only output is displayed).
